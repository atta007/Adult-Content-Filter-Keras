# -*- coding: utf-8 -*-
"""Adult_Content_Filter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12vit5w_uUPMJzvwTxnfj_k7Z1wplVRpO
"""

!wget  https://www.dropbox.com/s/t3fbvk43nmvwgfy/dataset.zip

!pwd

!unzip dataset.zip

!ls dataset/train_set/nsfw

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K

# dimensions of our images.
img_width, img_height = 150, 150

train_data_dir = '/content/dataset/train_set'
validation_data_dir = '/content/dataset/test_set'
nb_train_samples = 2000
nb_validation_samples = 800
epochs = 50
batch_size = 16

if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
  input_shape = (img_width, img_height, 3)
  
print(input_shape)

import matplotlib.pyplot as plt
import cv2
img = cv2.imread('dataset/train_set/nsfw/01-13.jpg')
blurImg = cv2.blur(img,(100,100))  
plt.imshow(blurImg)

model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
metrics=['accuracy'])

from keras.preprocessing.image import ImageDataGenerator
# this is the augmentation configuration we will use for training
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
horizontal_flip=True)

# this is the augmentation configuration we will use for training
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

# this is the augmentation configuration we will use for testing:
# only rescaling
test_datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

# this is the augmentation configuration we will use for training
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

# this is the augmentation configuration we will use for testing:
# only rescaling
test_datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

model.fit_generator(
    train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=nb_validation_samples // batch_size)

model.save_weights('nude_filter.h5')

from google.colab import files
uploaded = files.upload()

!ls

from keras.models import load_model
from keras.preprocessing import image
import numpy as np

test_image = image.load_img('37284432_1991222187589188_4096692789364916224_o.jpg', target_size=(img_width, img_height))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis=0)

print(test_image.shape)

test_image = test_image.reshape(1,img_width, img_height, 3)    # Ambiguity!
# Should this instead be: test_image.reshape(img_width, img_height, 3) ??
 

result = model.predict(test_image, batch_size=1)
print(type(result))

img_class = model.predict_classes(test_image)
prediction = img_class[0]
classname = img_class[0]
if(classname == 0):
  print("Adult Content")
  print(prediction)
else:
  print("Non-Adult Content")

!ls dataset/test_set/sfw

import matplotlib.pyplot as plt
import cv2
img = cv2.imread('dataset/test_set/sfw/2017-08-23-10-47-47.jpg')
plt.imshow(img)

model.save('Adult_Filter.h5')

from google.colab import files
files.download('nude_filter.h5')

!pip install -U -q PyDrive

import pickle
pickle.dump(prediction, open('Adult_Content_Filter.pickle', 'wb'))

from google.colab import files
files.download('Adult_Content_Filter.pickle')

!ls

from google.colab import files
files.download('Adult_Content_Filter.pickle')